import { App, ComponentPublicInstance as VueInstance } from "vue";
import { Action } from "me-actions";
import { VirtualElement as PopperVirtualElement, Instance as PopperInstance, Placement as PopperPlacement, PositioningStrategy as PopperPositioningStrategy, Modifier as PopperModifier, State as PopperState } from "@popperjs/core";
export interface IOptions {
    popupClasses?: string;
    popupReference?: Element | PopperVirtualElement;
    popupArrow?: boolean;
    popupArrowClasses?: string;
    popperPlacement?: PopperPlacement;
    popperStrategy?: PopperPositioningStrategy;
    popperModifiers?: Array<Partial<PopperModifier<any, any>>>;
    popperOnFirstUpdate?: (arg0: Partial<PopperState>) => void;
    bodyLock?: boolean;
    bodyClasses?: string;
    modal?: boolean;
    modalClasses?: string;
    modalOpenAni?: boolean;
    modalOpenAniClasses?: string;
    modalOpenDuration?: number;
    modalCloseAni?: boolean;
    modalCloseAniClasses?: string;
    modalCloseDuration?: number;
    openDelay?: number;
    openAni?: boolean;
    openAniClasses?: string;
    openDuration?: number;
    closeDelay?: number;
    closeAni?: boolean;
    closeAniClasses?: string;
    closeDuration?: number;
    closeDestroy?: boolean;
    closePressEsc?: boolean;
    closeClickOutside?: boolean;
    closeClickOutsideChecker?: (e: any) => boolean;
    onElAppended?: (context: IContext) => any;
    onElRemoved?: (context: IContext) => any;
}
export declare function install(vueapp: App, options?: IOptions): void;
interface IContext {
    options: IOptions;
    popup: VueInstance | HTMLElement;
    el: HTMLElement;
    status: string;
    action: Action;
    zIndex: number;
    popper: PopperInstance;
    arrowEl: HTMLElement;
    modalEl: HTMLElement;
    popupOpenTimer: any;
    popupOpenResolve: () => any;
    popupCloseTimer: any;
    popupCloseResolve: () => any;
    modalOpenTimer: any;
    modalOpenResolve: () => any;
    modalCloseTimer: any;
    modalCloseResolve: () => any;
}
export declare class PopupManager {
    private static instance;
    static getInstance(): PopupManager;
    private zIndex;
    private defaultOptions;
    private popups;
    private bodyStore;
    private bodyLocks;
    private currentBodyClasses;
    constructor();
    private getContext;
    private getNextZIndex;
    private mergeOptions;
    getStatus(popup: VueInstance | HTMLElement): string;
    willOpen(popup: VueInstance | HTMLElement): boolean;
    willClose(popup: VueInstance | HTMLElement): boolean;
    open(popup: VueInstance | HTMLElement, options?: Partial<IOptions>, autoStart?: boolean): Action;
    private openPopup;
    private stopOpenPopup;
    private lockBody;
    private openModal;
    private stopOpenModal;
    close(popup: VueInstance | HTMLElement, options?: Partial<IOptions>, autoStart?: boolean): Action;
    private closePopup;
    private stopClosePopup;
    private unlockBody;
    private closeModal;
    private stopCloseModal;
    private resetPopup;
    private destroyPopup;
    destroy(popup: VueInstance | HTMLElement): void;
    getPopups(reverse?: boolean): (HTMLElement | VueInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>)[];
    closeAll(action?: Action, exp?: (VueInstance | HTMLElement)[], autoStart?: boolean): Action;
    destyorAll(): void;
}
export {};
